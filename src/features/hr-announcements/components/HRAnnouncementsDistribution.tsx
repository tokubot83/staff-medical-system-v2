'use client'

import React, { useState } from 'react'
import styles from './HRAnnouncementsDistribution.module.css'

interface Announcement {
  id: string
  title: string
  category: 'policy' | 'event' | 'training' | 'benefit' | 'survey' | 'interview' | 'other'
  subcategory?: 'reservation' | 'result' | 'reminder' | 'other'
  status: 'draft' | 'scheduled' | 'sent' | 'archived'
  scheduledDate?: string
  sentDate?: string
  targetDepartments: string[]
  priority: 'high' | 'medium' | 'low'
  readRate?: number
}

interface Template {
  id: string
  category: string
  subcategory?: string
  title: string
  content: string
}

export default function HRAnnouncementsDistribution() {
  const [selectedTab, setSelectedTab] = useState('compose')
  const [showPreview, setShowPreview] = useState(false)
  const [selectedCategory, setSelectedCategory] = useState<string>('')
  const [selectedSubcategory, setSelectedSubcategory] = useState<string>('')
  const [title, setTitle] = useState<string>('')
  const [content, setContent] = useState<string>('')

  const mockAnnouncements: Announcement[] = [
    {
      id: '1',
      title: '2025Âπ¥Â∫¶ÂÅ•Â∫∑Ë®∫Êñ≠ÂÆüÊñΩ„ÅÆ„ÅäÁü•„Çâ„Åõ',
      category: 'benefit',
      status: 'sent',
      sentDate: '2025-01-15',
      targetDepartments: ['ÂÖ®Á§æ'],
      priority: 'high',
      readRate: 78
    },
    {
      id: '2',
      title: 'Êñ∞‰∫∫‰∫ãÂà∂Â∫¶Ë™¨Êòé‰ºö„ÅÆÈñãÂÇ¨„Å´„Å§„ÅÑ„Å¶',
      category: 'policy',
      status: 'scheduled',
      scheduledDate: '2025-01-25 10:00',
      targetDepartments: ['ÁÆ°ÁêÜÈÉ®', '‰∫∫‰∫ãÈÉ®'],
      priority: 'high'
    },
    {
      id: '3',
      title: '„É™„Éº„ÉÄ„Éº„Ç∑„ÉÉ„ÉóÁ†î‰øÆ„ÅÆÂèÇÂä†ËÄÖÂãüÈõÜ',
      category: 'training',
      status: 'sent',
      sentDate: '2025-01-10',
      targetDepartments: ['Âñ∂Ê•≠ÈÉ®', 'ÈñãÁô∫ÈÉ®'],
      priority: 'medium',
      readRate: 65
    },
    {
      id: '4',
      title: 'Á§æÂÜÖ„Ç§„Éô„É≥„Éà„ÄåÊñ∞Âπ¥‰ºö„ÄçÈñãÂÇ¨„ÅÆ„ÅîÊ°àÂÜÖ',
      category: 'event',
      status: 'draft',
      targetDepartments: ['ÂÖ®Á§æ'],
      priority: 'low'
    }
  ]

  const categories = [
    { id: 'policy', label: 'Âà∂Â∫¶„ÉªË¶èÂÆö', icon: 'üìã', color: '#7c3aed' },
    { id: 'event', label: '„Ç§„Éô„É≥„Éà', icon: 'üéâ', color: '#f59e0b' },
    { id: 'training', label: 'Á†î‰øÆ„ÉªÊïôËÇ≤', icon: 'üìö', color: '#3b82f6' },
    { id: 'survey', label: '„Ç¢„É≥„Ç±„Éº„Éà', icon: 'üìä', color: '#ec4899' },
    { id: 'benefit', label: 'Á¶èÂà©ÂéöÁîü', icon: 'üíù', color: '#10b981' },
    { id: 'interview', label: 'Èù¢Ë´á', icon: 'üë•', color: '#8b5cf6' },
    { id: 'other', label: '„Åù„ÅÆ‰ªñ', icon: 'üì¢', color: '#6b7280' }
  ]

  const subcategories = {
    interview: [
      { id: 'reservation', label: '‰∫àÁ¥ÑÊ°àÂÜÖ', icon: 'üìÖ' },
      { id: 'result', label: 'ÁµêÊûúÈÄöÁü•', icon: 'üìù' },
      { id: 'reminder', label: '„É™„Éû„Ç§„É≥„ÉÄ„Éº', icon: 'üîî' },
      { id: 'other', label: '„Åù„ÅÆ‰ªñ', icon: 'üìå' }
    ]
  }

  const templates: Template[] = [
    {
      id: 'interview-reservation-regular',
      category: 'interview',
      subcategory: 'reservation',
      title: '„ÄêÈáçË¶Å„ÄëÂÆöÊúüÈù¢Ë´á„ÅÆ‰∫àÁ¥ÑÈñãÂßã„ÅÆ„ÅäÁü•„Çâ„Åõ',
      content: `ËÅ∑Âì°„ÅÆÁöÜÊßò„Å∏

${new Date().getFullYear()}Âπ¥Â∫¶„ÅÆÂÆöÊúüÈù¢Ë´á„ÅÆ‰∫àÁ¥Ñ„ÇíÈñãÂßã„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ

‚ñ†Èù¢Ë´áÊúüÈñì
${new Date().getMonth() + 2}Êúà1Êó•ÔºàÊúàÔºâÔΩû${new Date().getMonth() + 2}Êúà28Êó•ÔºàÈáëÔºâ

‚ñ†‰∫àÁ¥ÑÂèó‰ªòÊúüÈñì
Êú¨Êó•„Çà„Çä${new Date().getMonth() + 1}Êúà20Êó•ÔºàÈáëÔºâ„Åæ„Åß

‚ñ†‰∫àÁ¥ÑÊñπÊ≥ï
1. ËÅ∑Âì°„Éù„Éº„Çø„É´„Çµ„Ç§„Éà„Å´„É≠„Ç∞„Ç§„É≥
2. „ÄåÈù¢Ë´á‰∫àÁ¥Ñ„Äç„É°„Éã„É•„Éº„ÇíÈÅ∏Êäû
3. „ÅîÈÉΩÂêà„ÅÆËâØ„ÅÑÊó•ÊôÇ„ÇíÈÅ∏Êäû
4. ‰∫àÁ¥ÑÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„Åó„ÄÅ„Äå‰∫àÁ¥ÑÁ¢∫ÂÆö„Äç„Çí„ÇØ„É™„ÉÉ„ÇØ

‚ñ†Ê≥®ÊÑè‰∫ãÈ†Ö
„ÉªÈù¢Ë´áÊôÇÈñì„ÅØ1‰∫∫„ÅÇ„Åü„Çä30ÂàÜ„Çí‰∫àÂÆö„Åó„Å¶„ÅÑ„Åæ„Åô
„Éª‰∫àÁ¥ÑÂæå„ÅÆÂ§âÊõ¥„ÅØ„ÄÅÈù¢Ë´áÊó•„ÅÆ3Âñ∂Ê•≠Êó•Ââç„Åæ„ÅßÂèØËÉΩ„Åß„Åô
„Éª‰ΩìË™ø‰∏çËâØÁ≠â„Åß„Ç≠„É£„É≥„Çª„É´„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅÊó©„ÇÅ„Å´„ÅîÈÄ£Áµ°„Åè„Å†„Åï„ÅÑ

‚ñ†„ÅäÂïè„ÅÑÂêà„Çè„Åõ
‰∫∫‰∫ãÈÉ® Èù¢Ë´áÊãÖÂΩì
ÂÜÖÁ∑öÔºö1234
„É°„Éº„É´Ôºöinterview@company.com

„Åî‰∏çÊòé„Å™ÁÇπ„Åå„Åî„Åñ„ÅÑ„Åæ„Åó„Åü„Çâ„ÄÅ„ÅäÊ∞óËªΩ„Å´„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Åè„Å†„Åï„ÅÑ„ÄÇ

‰∫∫‰∫ãÈÉ®`
    },
    {
      id: 'interview-reservation-evaluation',
      category: 'interview',
      subcategory: 'reservation',
      title: '„ÄêË¶ÅÂØæÂøú„ÄëË©ï‰æ°Èù¢Ë´á„ÅÆÂÆüÊñΩ„Å´„Å§„ÅÑ„Å¶',
      content: `ËÅ∑Âì°„ÅÆÁöÜÊßò„Å∏

${new Date().getFullYear()}Âπ¥Â∫¶‰∏äÊúü„ÅÆË©ï‰æ°Èù¢Ë´á„ÇíÂÆüÊñΩ„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ

‚ñ†Èù¢Ë´á„ÅÆÁõÆÁöÑ
„Éª‰∏äÊúü„ÅÆÊåØ„ÇäËøî„Çä„Å®Ë©ï‰æ°„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
„Éª‰∏ãÊúü„ÅÆÁõÆÊ®ôË®≠ÂÆö
„Éª„Ç≠„É£„É™„Ç¢ÈñãÁô∫„Å´Èñ¢„Åô„ÇãÁõ∏Ë´á

‚ñ†ÂØæË±°ËÄÖ
ÂÖ®Ê≠£Á§æÂì°

‚ñ†ÂÆüÊñΩÊúüÈñì
${new Date().getMonth() + 1}Êúà15Êó•ÔºàÊúàÔºâÔΩû${new Date().getMonth() + 2}Êúà15Êó•ÔºàÈáëÔºâ

‚ñ†‰∫àÁ¥ÑÊñπÊ≥ï
‰∏äÈï∑„Çà„ÇäÂÄãÂà•„Å´Êó•Á®ãË™øÊï¥„ÅÆ„ÅîÈÄ£Áµ°„Çí„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ
ÊèêÁ§∫„Åï„Çå„ÅüÊó•Á®ã„Åß„ÅîÈÉΩÂêà„ÅåÊÇ™„ÅÑÂ†¥Âêà„ÅØ„ÄÅÈÄü„ÇÑ„Åã„Å´‰∏äÈï∑„Å∏„ÅîÁõ∏Ë´á„Åè„Å†„Åï„ÅÑ„ÄÇ

‚ñ†Ê∫ñÂÇô‰∫ãÈ†Ö
Èù¢Ë´áÂâç„Å´‰ª•‰∏ã„Çí„ÅîÊ∫ñÂÇô„Åè„Å†„Åï„ÅÑÔºö
1. ‰∏äÊúü„ÅÆÊ•≠ÂãôÂÆüÁ∏æ„ÅÆÊï¥ÁêÜ
2. Ëá™Â∑±Ë©ï‰æ°„Ç∑„Éº„Éà„ÅÆ‰ΩúÊàê
3. ‰∏ãÊúü„ÅÆÁõÆÊ®ôÊ°à

‚ñ†„Åù„ÅÆ‰ªñ
„ÉªÈù¢Ë´á„ÅØÂéüÂâáÂØæÈù¢„ÅßÂÆüÊñΩ„Åó„Åæ„Åô„Åå„ÄÅ„É™„É¢„Éº„ÉàÂã§ÂãôËÄÖ„ÅØ„Ç™„É≥„É©„Ç§„É≥„Åß„ÅÆÂÆüÊñΩ„ÇÇÂèØËÉΩ„Åß„Åô
„ÉªÈù¢Ë´áÊôÇÈñì„ÅØÁ¥Ñ45ÂàÜ„Çí‰∫àÂÆö„Åó„Å¶„ÅÑ„Åæ„Åô

„ÅîÂçîÂäõ„ÅÆ„Åª„Å©„Çà„Çç„Åó„Åè„ÅäÈ°ò„ÅÑ„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ

‰∫∫‰∫ãÈÉ®`
    }
  ]

  const tabs = [
    { id: 'compose', label: 'Êñ∞Ë¶è‰ΩúÊàê', icon: '‚úèÔ∏è' },
    { id: 'list', label: 'ÈÖç‰ø°Â±•Ê≠¥', icon: 'üìã' },
    { id: 'templates', label: '„ÉÜ„É≥„Éó„É¨„Éº„Éà', icon: 'üìù' },
    { id: 'analytics', label: 'ÈÖç‰ø°ÂàÜÊûê', icon: 'üìä' },
    { id: 'settings', label: 'Ë®≠ÂÆö', icon: '‚öôÔ∏è' }
  ]

  const getCategoryInfo = (categoryId: string) => {
    return categories.find(c => c.id === categoryId) || categories[4]
  }

  const handleCategorySelect = (categoryId: string) => {
    setSelectedCategory(categoryId)
    setSelectedSubcategory('')
    // „Ç´„ÉÜ„Ç¥„É™„ÅåÈù¢Ë´á‰ª•Â§ñ„ÅÆÂ†¥Âêà„ÅØ„Çµ„Éñ„Ç´„ÉÜ„Ç¥„É™„Çí„É™„Çª„ÉÉ„Éà
    if (categoryId !== 'interview') {
      setTitle('')
      setContent('')
    }
  }

  const handleSubcategorySelect = (subcategoryId: string) => {
    setSelectedSubcategory(subcategoryId)

    // ‰∫àÁ¥ÑÊ°àÂÜÖ„ÇíÈÅ∏Êäû„Åó„ÅüÂ†¥Âêà„ÄÅ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíËá™ÂãïÊåøÂÖ•
    if (selectedCategory === 'interview' && subcategoryId === 'reservation') {
      // „Éá„Éï„Ç©„É´„Éà„ÅßÂÆöÊúüÈù¢Ë´á„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí‰ΩøÁî®
      const template = templates.find(
        t => t.id === 'interview-reservation-regular'
      )
      if (template) {
        setTitle(template.title)
        setContent(template.content)
      }
    } else {
      // „Åù„ÅÆ‰ªñ„ÅÆ„Çµ„Éñ„Ç´„ÉÜ„Ç¥„É™„ÅÆÂ†¥Âêà„ÅØ„ÇØ„É™„Ç¢
      setTitle('')
      setContent('')
    }
  }

  const handleTemplateSelect = (templateId: string) => {
    const template = templates.find(t => t.id === templateId)
    if (template) {
      setTitle(template.title)
      setContent(template.content)
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return '#ef4444'
      case 'medium': return '#f59e0b'
      case 'low': return '#6b7280'
      default: return '#6b7280'
    }
  }

  return (
    <div className={styles.container}>
      <div className={styles.tabs}>
        {tabs.map(tab => (
          <button
            key={tab.id}
            className={`${styles.tab} ${selectedTab === tab.id ? styles.active : ''}`}
            onClick={() => setSelectedTab(tab.id)}
          >
            <span className={styles.tabIcon}>{tab.icon}</span>
            <span className={styles.tabLabel}>{tab.label}</span>
          </button>
        ))}
      </div>

      {selectedTab === 'compose' && (
        <div className={styles.composeSection}>
          <div className={styles.mainGrid}>
            <div className={styles.card}>
              <div className={styles.cardHeader}>
                <div className={styles.cardTitle}>
                  <span>‚úèÔ∏è</span>
                  <span>„ÅäÁü•„Çâ„Åõ‰ΩúÊàê</span>
                </div>
              </div>

              <div className={styles.formGroup}>
                <label className={styles.formLabel}>„Ç´„ÉÜ„Ç¥„É™„Éº</label>
                <div className={styles.categoryGrid}>
                  {categories.map(cat => (
                    <div
                      key={cat.id}
                      className={`${styles.categoryCard} ${selectedCategory === cat.id ? styles.selected : ''}`}
                      style={{
                        borderColor: selectedCategory === cat.id ? cat.color : '#e5e7eb',
                        backgroundColor: selectedCategory === cat.id ? `${cat.color}10` : 'transparent'
                      }}
                      onClick={() => handleCategorySelect(cat.id)}
                    >
                      <span className={styles.categoryIcon}>{cat.icon}</span>
                      <span className={styles.categoryLabel}>{cat.label}</span>
                    </div>
                  ))}
                </div>
              </div>

              {selectedCategory === 'interview' && (
                <div className={styles.formGroup}>
                  <label className={styles.formLabel}>„Çµ„Éñ„Ç´„ÉÜ„Ç¥„É™„Éº</label>
                  <div className={styles.subcategoryGrid}>
                    {subcategories.interview.map(subcat => (
                      <button
                        key={subcat.id}
                        className={`${styles.subcategoryBtn} ${selectedSubcategory === subcat.id ? styles.selected : ''}`}
                        onClick={() => handleSubcategorySelect(subcat.id)}
                      >
                        <span>{subcat.icon}</span>
                        <span>{subcat.label}</span>
                      </button>
                    ))}
                  </div>

                  {selectedSubcategory === 'reservation' && (
                    <div className={styles.templateSelector}>
                      <label className={styles.formLabel}>„ÉÜ„É≥„Éó„É¨„Éº„ÉàÈÅ∏Êäû</label>
                      <select
                        className={styles.formSelect}
                        onChange={(e) => handleTemplateSelect(e.target.value)}
                        defaultValue="interview-reservation-regular"
                      >
                        <option value="interview-reservation-regular">ÂÆöÊúüÈù¢Ë´á„ÅÆ‰∫àÁ¥ÑÊ°àÂÜÖ</option>
                        <option value="interview-reservation-evaluation">Ë©ï‰æ°Èù¢Ë´á„ÅÆ‰∫àÁ¥ÑÊ°àÂÜÖ</option>
                      </select>
                    </div>
                  )}
                </div>
              )}

              <div className={styles.formGroup}>
                <label className={styles.formLabel}>‰ª∂Âêç</label>
                <input
                  type="text"
                  className={styles.formInput}
                  placeholder="„ÅäÁü•„Çâ„Åõ„ÅÆ„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                />
              </div>

              <div className={styles.formGroup}>
                <label className={styles.formLabel}>Êú¨Êñá</label>
                <textarea
                  className={styles.formTextarea}
                  rows={12}
                  placeholder="„ÅäÁü•„Çâ„Åõ„ÅÆÂÜÖÂÆπ„ÇíÂÖ•Âäõ"
                  value={content}
                  onChange={(e) => setContent(e.target.value)}
                />
              </div>

              <div className={styles.formGroup}>
                <label className={styles.formLabel}>ÈÖç‰ø°ÂØæË±°</label>
                <div className={styles.targetSelection}>
                  <label className={styles.checkboxLabel}>
                    <input type="checkbox" /> ÂÖ®Á§æ
                  </label>
                  <label className={styles.checkboxLabel}>
                    <input type="checkbox" /> Âñ∂Ê•≠ÈÉ®
                  </label>
                  <label className={styles.checkboxLabel}>
                    <input type="checkbox" /> ÈñãÁô∫ÈÉ®
                  </label>
                  <label className={styles.checkboxLabel}>
                    <input type="checkbox" /> ÁÆ°ÁêÜÈÉ®
                  </label>
                  <label className={styles.checkboxLabel}>
                    <input type="checkbox" /> Ë£ΩÈÄ†ÈÉ®
                  </label>
                  <label className={styles.checkboxLabel}>
                    <input type="checkbox" /> ‰∫∫‰∫ãÈÉ®
                  </label>
                </div>
              </div>

              <div className={styles.formGroup}>
                <label className={styles.formLabel}>ÈáçË¶ÅÂ∫¶</label>
                <div className={styles.priorityOptions}>
                  <label className={styles.radioLabel}>
                    <input type="radio" name="priority" value="high" />
                    <span className={styles.priorityHigh}>È´ò</span>
                  </label>
                  <label className={styles.radioLabel}>
                    <input type="radio" name="priority" value="medium" defaultChecked />
                    <span className={styles.priorityMedium}>‰∏≠</span>
                  </label>
                  <label className={styles.radioLabel}>
                    <input type="radio" name="priority" value="low" />
                    <span className={styles.priorityLow}>‰Ωé</span>
                  </label>
                </div>
              </div>

              <div className={styles.formActions}>
                <button className={styles.btnSecondary}>‰∏ãÊõ∏„Åç‰øùÂ≠ò</button>
                <button
                  className={styles.btnSecondary}
                  onClick={() => setShowPreview(!showPreview)}
                >
                  „Éó„É¨„Éì„É•„Éº
                </button>
                <button className={styles.btnPrimary}>ÈÖç‰ø°‰∫àÁ¥Ñ</button>
                <button className={styles.btnPrimary}>‰ªä„Åô„ÅêÈÖç‰ø°</button>
              </div>
            </div>

            <div className={styles.card}>
              <div className={styles.cardHeader}>
                <div className={styles.cardTitle}>
                  <span>üí°</span>
                  <span>ÈÖç‰ø°„ÅÆ„Éí„É≥„Éà</span>
                </div>
              </div>

              <div className={styles.tipsList}>
                <div className={styles.tipItem}>
                  <span className={styles.tipIcon}>üìÖ</span>
                  <div className={styles.tipContent}>
                    <div className={styles.tipTitle}>ÊúÄÈÅ©„Å™ÈÖç‰ø°„Çø„Ç§„Éü„É≥„Ç∞</div>
                    <div className={styles.tipText}>
                      ÊúàÊõúÊó•„ÅÆÂçàÂâç9ÊôÇ„Äú10ÊôÇ„ÄÅÁÅ´ÊõúÊó•„ÅÆÂçàÂâç10ÊôÇ„Äú11ÊôÇ„ÅåÊúÄ„ÇÇÊó¢Ë™≠Áéá„ÅåÈ´ò„ÅÑÂÇæÂêë„Å´„ÅÇ„Çä„Åæ„Åô„ÄÇ
                    </div>
                  </div>
                </div>

                <div className={styles.tipItem}>
                  <span className={styles.tipIcon}>üìù</span>
                  <div className={styles.tipContent}>
                    <div className={styles.tipTitle}>ÂäπÊûúÁöÑ„Å™‰ª∂Âêç</div>
                    <div className={styles.tipText}>
                      „ÄêÈáçË¶Å„Äë„ÄêÁ∑†Âàá„ÅÇ„Çä„Äë„Å™„Å©„ÅÆ„Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ„Çí‰ΩøÁî®„Åô„Çã„Å®ÈñãÂ∞ÅÁéá„Åå20%Âêë‰∏ä„Åó„Åæ„Åô„ÄÇ
                    </div>
                  </div>
                </div>

                <div className={styles.tipItem}>
                  <span className={styles.tipIcon}>üéØ</span>
                  <div className={styles.tipContent}>
                    <div className={styles.tipTitle}>„Çø„Éº„Ç≤„ÉÜ„Ç£„É≥„Ç∞</div>
                    <div className={styles.tipText}>
                      ÈÉ®ÁΩ≤„ÇíÈôêÂÆö„Åó„ÅüÈÖç‰ø°„ÅÆÊñπ„Åå„ÄÅÂÖ®Á§æÈÖç‰ø°„Çà„ÇäÊó¢Ë™≠Áéá„Åå15%È´ò„Åè„Å™„Çä„Åæ„Åô„ÄÇ
                    </div>
                  </div>
                </div>
              </div>

              {showPreview && (
                <div className={styles.previewSection}>
                  <div className={styles.previewHeader}>
                    <span>üì± VoiceDrive„Åß„ÅÆË°®Á§∫„Ç§„É°„Éº„Ç∏</span>
                  </div>
                  <div className={styles.previewDevice}>
                    <div className={styles.previewNotification}>
                      <div className={styles.notificationHeader}>
                        <span className={styles.notificationIcon}>üè¢</span>
                        <span className={styles.notificationFrom}>‰∫∫‰∫ãÈÉ®</span>
                        <span className={styles.notificationTime}>‰ªä</span>
                      </div>
                      <div className={styles.notificationTitle}>
                        „ÄêÈáçË¶Å„Äë2025Âπ¥Â∫¶ÂÅ•Â∫∑Ë®∫Êñ≠ÂÆüÊñΩ„ÅÆ„ÅäÁü•„Çâ„Åõ
                      </div>
                      <div className={styles.notificationBody}>
                        Êú¨Âπ¥Â∫¶„ÅÆÂÅ•Â∫∑Ë®∫Êñ≠„Çí‰ª•‰∏ã„ÅÆÊó•Á®ã„ÅßÂÆüÊñΩ„ÅÑ„Åü„Åó„Åæ„Åô...
                      </div>
                      <div className={styles.notificationAction}>
                        Ë©≥Á¥∞„ÇíÁ¢∫Ë™ç„Åô„Çã ‚Üí
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {selectedTab === 'list' && (
        <div className={styles.listSection}>
          <div className={styles.card}>
            <div className={styles.cardHeader}>
              <div className={styles.cardTitle}>
                <span>üìã</span>
                <span>ÈÖç‰ø°Â±•Ê≠¥</span>
              </div>
              <div className={styles.filterButtons}>
                <button className={styles.filterBtn}>ÂÖ®„Å¶</button>
                <button className={styles.filterBtn}>ÈÖç‰ø°Ê∏à„Åø</button>
                <button className={styles.filterBtn}>‰∫àÁ¥Ñ‰∏≠</button>
                <button className={styles.filterBtn}>‰∏ãÊõ∏„Åç</button>
              </div>
            </div>

            <div className={styles.announcementList}>
              {mockAnnouncements.map(announcement => {
                const categoryInfo = getCategoryInfo(announcement.category)
                return (
                  <div key={announcement.id} className={styles.announcementItem}>
                    <div className={styles.announcementIcon} style={{ color: categoryInfo.color }}>
                      {categoryInfo.icon}
                    </div>
                    <div className={styles.announcementContent}>
                      <div className={styles.announcementTitle}>{announcement.title}</div>
                      <div className={styles.announcementMeta}>
                        <span className={styles.metaItem}>
                          <span style={{ color: getPriorityColor(announcement.priority) }}>‚óè</span>
                          {announcement.priority === 'high' ? 'È´ò' : announcement.priority === 'medium' ? '‰∏≠' : '‰Ωé'}
                        </span>
                        <span className={styles.metaItem}>
                          ÂØæË±°: {announcement.targetDepartments.join(', ')}
                        </span>
                        {announcement.sentDate && (
                          <span className={styles.metaItem}>
                            ÈÖç‰ø°Êó•: {announcement.sentDate}
                          </span>
                        )}
                        {announcement.scheduledDate && (
                          <span className={styles.metaItem}>
                            ‰∫àÁ¥Ñ: {announcement.scheduledDate}
                          </span>
                        )}
                      </div>
                    </div>
                    {announcement.readRate && (
                      <div className={styles.readRateBox}>
                        <div className={styles.readRateValue}>{announcement.readRate}%</div>
                        <div className={styles.readRateLabel}>Êó¢Ë™≠Áéá</div>
                      </div>
                    )}
                    <div className={styles.announcementActions}>
                      <button className={styles.actionBtn}>Ë©≥Á¥∞</button>
                      {announcement.status === 'draft' && (
                        <button className={styles.actionBtn}>Á∑®ÈõÜ</button>
                      )}
                    </div>
                  </div>
                )
              })}
            </div>
          </div>
        </div>
      )}
    </div>
  )
}