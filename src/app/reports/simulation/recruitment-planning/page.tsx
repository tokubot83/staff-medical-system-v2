'use client';

import React, { Suspense, useState, useMemo } from 'react';
import { useSearchParams } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import CommonHeader from '@/components/CommonHeader';
import { CategoryTopButton } from '@/components/CategoryTopButton';
import { exportToPDF } from '@/utils/pdfExport';
import { staffDatabase } from '@/app/data/staffData';
import {
  LineChart,
  Line,
  BarChart,
  Bar,
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell
} from 'recharts';

function Content() {
  const searchParams = useSearchParams();
  const facilityParam = searchParams.get('facility') || '';
  const [selectedFacility, setSelectedFacility] = useState(facilityParam || '蜈ｨ譁ｽ險ｭ');
  const [selectedDepartment, setSelectedDepartment] = useState('蜈ｨ驛ｨ鄂ｲ');
  const [selectedPosition, setSelectedPosition] = useState('蜈ｨ閨ｷ遞ｮ');
  const [targetYear, setTargetYear] = useState(2025);
  const [recruitmentStrategy, setRecruitmentStrategy] = useState('balanced');

  // 繧ｹ繧ｿ繝・ヵ繝・・繧ｿ縺九ｉ騾閨ｷ莠域ｸｬ繧定ｨ育ｮ・
  const retirementPrediction = useMemo(() => {
    const staffList = Object.values(staffDatabase).filter(staff => {
      if (selectedFacility !== '蜈ｨ譁ｽ險ｭ' && staff.facility !== selectedFacility) return false;
      if (selectedDepartment !== '蜈ｨ驛ｨ鄂ｲ' && staff.department !== selectedDepartment) return false;
      if (selectedPosition !== '蜈ｨ閨ｷ遞ｮ' && !staff.position.includes(selectedPosition)) return false;
      return true;
    });

    // 蟷ｴ鮨｢蛻･騾閨ｷ莠域ｸｬ
    const predictions = [];
    const currentYear = new Date().getFullYear();
    
    for (let year = currentYear; year <= targetYear; year++) {
      const yearData = {
        year: year,
        螳壼ｹｴ騾閨ｷ: 0,
        閾ｪ蟾ｱ驛ｽ蜷磯閨ｷ: 0,
        譌ｩ譛滄閨ｷ: 0,
        蠢・ｦ∵治逕ｨ謨ｰ: 0
      };

      staffList.forEach(staff => {
        const futureAge = staff.age + (year - currentYear);
        
        // 螳壼ｹｴ騾閨ｷ・・5豁ｳ・・
        if (futureAge >= 65 && futureAge < 66) {
          yearData.螳壼ｹｴ騾閨ｷ++;
        }
        
        // 閾ｪ蟾ｱ驛ｽ蜷磯閨ｷ莠域ｸｬ・亥ｹｴ鮨｢繝ｻ繧ｹ繝医Ξ繧ｹ繝ｻ繧ｨ繝ｳ繧ｲ繝ｼ繧ｸ繝｡繝ｳ繝医°繧臥ｮ怜・・・
        const turnoverRisk = (staff.stressIndex / 100) * 0.3 + 
                           (1 - staff.engagement / 100) * 0.4 +
                           (staff.overtime > 30 ? 0.3 : 0);
        if (Math.random() < turnoverRisk * 0.1) { // 蟷ｴ髢・0%縺ｮ遒ｺ邇・〒鬮倥Μ繧ｹ繧ｯ閠・′騾閨ｷ
          yearData.閾ｪ蟾ｱ驛ｽ蜷磯閨ｷ++;
        }
        
        // 譌ｩ譛滄閨ｷ・・5豁ｳ莉･荳奇ｼ・
        if (futureAge >= 55 && futureAge < 65 && Math.random() < 0.02) {
          yearData.譌ｩ譛滄閨ｷ++;
        }
      });
      
      yearData.蠢・ｦ∵治逕ｨ謨ｰ = yearData.螳壼ｹｴ騾閨ｷ + yearData.閾ｪ蟾ｱ驛ｽ蜷磯閨ｷ + yearData.譌ｩ譛滄閨ｷ;
      predictions.push(yearData);
    }
    
    return predictions;
  }, [selectedFacility, selectedDepartment, selectedPosition, targetYear]);

  // 謗｡逕ｨ繧ｳ繧ｹ繝郁ｨ育ｮ・
  const recruitmentCost = useMemo(() => {
    const costPerHire = {
      譁ｰ蜊・ { 謗｡逕ｨ雋ｻ: 300000, 遐比ｿｮ雋ｻ: 500000, 蛻晏ｹｴ蠎ｦ莠ｺ莉ｶ雋ｻ: 3000000 },
      荳ｭ騾・ { 謗｡逕ｨ雋ｻ: 800000, 遐比ｿｮ雋ｻ: 200000, 蛻晏ｹｴ蠎ｦ莠ｺ莉ｶ雋ｻ: 4000000 },
      繝代・繝・ { 謗｡逕ｨ雋ｻ: 100000, 遐比ｿｮ雋ｻ: 50000, 蛻晏ｹｴ蠎ｦ莠ｺ莉ｶ雋ｻ: 2000000 }
    };

    const strategies = {
      balanced: { 譁ｰ蜊・ 0.4, 荳ｭ騾・ 0.4, 繝代・繝・ 0.2 },
      experienced: { 譁ｰ蜊・ 0.2, 荳ｭ騾・ 0.6, 繝代・繝・ 0.2 },
      newgrad: { 譁ｰ蜊・ 0.7, 荳ｭ騾・ 0.2, 繝代・繝・ 0.1 },
      flexible: { 譁ｰ蜊・ 0.2, 荳ｭ騾・ 0.3, 繝代・繝・ 0.5 }
    };

    const strategy = strategies[recruitmentStrategy as keyof typeof strategies];
    const totalRecruits = retirementPrediction.reduce((sum, year) => sum + year.蠢・ｦ∵治逕ｨ謨ｰ, 0);

    return Object.entries(strategy).map(([type, ratio]) => {
      const count = Math.round(totalRecruits * ratio);
      const cost = costPerHire[type as keyof typeof costPerHire];
      return {
        type,
        count,
        謗｡逕ｨ雋ｻ: cost.謗｡逕ｨ雋ｻ * count,
        遐比ｿｮ雋ｻ: cost.遐比ｿｮ雋ｻ * count,
        莠ｺ莉ｶ雋ｻ: cost.蛻晏ｹｴ蠎ｦ莠ｺ莉ｶ雋ｻ * count,
        蜷郁ｨ・ (cost.謗｡逕ｨ雋ｻ + cost.遐比ｿｮ雋ｻ + cost.蛻晏ｹｴ蠎ｦ莠ｺ莉ｶ雋ｻ) * count
      };
    });
  }, [retirementPrediction, recruitmentStrategy]);

  // 驛ｨ鄂ｲ蛻･蠢・ｦ∽ｺｺ蜩｡
  const departmentNeeds = useMemo(() => {
    const needs = {};
    const staffList = Object.values(staffDatabase).filter(staff => {
      if (selectedFacility !== '蜈ｨ譁ｽ險ｭ' && staff.facility !== selectedFacility) return false;
      return true;
    });

    // 驛ｨ鄂ｲ蛻･縺ｮ迴ｾ蝨ｨ莠ｺ謨ｰ縺ｨ逅・Φ莠ｺ謨ｰ繧定ｨ育ｮ・
    const departments = [...new Set(staffList.map(s => s.department))];
    return departments.map(dept => {
      const currentStaff = staffList.filter(s => s.department === dept);
      const avgAge = currentStaff.reduce((sum, s) => sum + s.age, 0) / currentStaff.length;
      const retirementRisk = currentStaff.filter(s => s.age >= 60).length;
      
      return {
        department: dept,
        迴ｾ蝨ｨ莠ｺ謨ｰ: currentStaff.length,
        蟷ｳ蝮・ｹｴ鮨｢: Math.round(avgAge),
        騾閨ｷ繝ｪ繧ｹ繧ｯ莠ｺ謨ｰ: retirementRisk,
        謗ｨ螂ｨ謗｡逕ｨ謨ｰ: Math.ceil(retirementRisk * 1.2) // 20%縺ｮ菴呵｣輔ｒ謖√◆縺帙ｋ
      };
    }).sort((a, b) => b.騾閨ｷ繝ｪ繧ｹ繧ｯ莠ｺ謨ｰ - a.騾閨ｷ繝ｪ繧ｹ繧ｯ莠ｺ謨ｰ);
  }, [selectedFacility]);

  // 繝輔ぅ繝ｫ繧ｿ繝ｼ逕ｨ縺ｮ繝ｪ繧ｹ繝亥叙蠕・
  const facilities = useMemo(() => {
    const facilitySet = new Set(Object.values(staffDatabase).map(s => s.facility));
    return ['蜈ｨ譁ｽ險ｭ', ...Array.from(facilitySet)];
  }, []);

  const departments = useMemo(() => {
    const staffList = selectedFacility === '蜈ｨ譁ｽ險ｭ' 
      ? Object.values(staffDatabase)
      : Object.values(staffDatabase).filter(s => s.facility === selectedFacility);
    const deptSet = new Set(staffList.map(s => s.department));
    return ['蜈ｨ驛ｨ鄂ｲ', ...Array.from(deptSet)];
  }, [selectedFacility]);

  const positions = ['蜈ｨ閨ｷ遞ｮ', '逵玖ｭｷ蟶ｫ', '逵玖ｭｷ陬懷勧閠・, '莉玖ｭｷ螢ｫ', '莉玖ｭｷ遖冗･牙｣ｫ', '逅・ｭｦ逋よｳ募｣ｫ', '菴懈･ｭ逋よｳ募｣ｫ', '蛹ｻ蟶ｫ', '阮ｬ蜑､蟶ｫ'];

  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'];

  return (
    <div className="min-h-screen bg-gray-50">
      <CommonHeader title="謗｡逕ｨ險育判繧ｷ繝溘Η繝ｬ繝ｼ繧ｷ繝ｧ繝ｳ" />
      
      <div id="report-content" className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="space-y-6">
          {/* 繝倥ャ繝繝ｼ */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h1 className="text-2xl font-bold">謗｡逕ｨ險育判繧ｷ繝溘Η繝ｬ繝ｼ繧ｷ繝ｧ繝ｳ</h1>
            <p className="text-gray-600 mt-2">騾閨ｷ莠域ｸｬ縺ｫ蝓ｺ縺･縺丞ｿ・ｦ∽ｺｺ蜩｡邂怜・縺ｨ謗｡逕ｨ繧ｳ繧ｹ繝医・譛驕ｩ蛹・/p>
            {facilityParam && (
              <p className="text-sm text-gray-500 mt-1">蟇ｾ雎｡譁ｽ險ｭ: {facilityParam}</p>
            )}
          </div>

          {/* 繝輔ぅ繝ｫ繧ｿ繝ｼ */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">譁ｽ險ｭ</label>
                <select
                  value={selectedFacility}
                  onChange={(e) => setSelectedFacility(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {facilities.map(facility => (
                    <option key={facility} value={facility}>{facility}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">驛ｨ鄂ｲ</label>
                <select
                  value={selectedDepartment}
                  onChange={(e) => setSelectedDepartment(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {departments.map(dept => (
                    <option key={dept} value={dept}>{dept}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">閨ｷ遞ｮ</label>
                <select
                  value={selectedPosition}
                  onChange={(e) => setSelectedPosition(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {positions.map(position => (
                    <option key={position} value={position}>{position}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">逶ｮ讓吝ｹｴ蠎ｦ</label>
                <select
                  value={targetYear}
                  onChange={(e) => setTargetYear(Number(e.target.value))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value={2025}>2025蟷ｴ</option>
                  <option value={2026}>2026蟷ｴ</option>
                  <option value={2027}>2027蟷ｴ</option>
                  <option value={2028}>2028蟷ｴ</option>
                  <option value={2029}>2029蟷ｴ</option>
                  <option value={2030}>2030蟷ｴ</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">謗｡逕ｨ謌ｦ逡･</label>
                <select
                  value={recruitmentStrategy}
                  onChange={(e) => setRecruitmentStrategy(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="balanced">繝舌Λ繝ｳ繧ｹ蝙・/option>
                  <option value="experienced">邨碁ｨ楢・㍾隕・/option>
                  <option value="newgrad">譁ｰ蜊帝㍾隕・/option>
                  <option value="flexible">譟碑ｻ滄寐逕ｨ驥崎ｦ・/option>
                </select>
              </div>
            </div>
          </div>

          {/* 騾閨ｷ莠域ｸｬ繧ｰ繝ｩ繝・*/}
          <Card>
            <CardHeader>
              <CardTitle>騾閨ｷ莠域ｸｬ謗ｨ遘ｻ</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart data={retirementPrediction}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="year" />
                    <YAxis />
                    <Tooltip 
                      formatter={(value: number) => `${value}蜷港}
                      contentStyle={{ 
                        backgroundColor: '#ffffff', 
                        border: '1px solid #e5e7eb', 
                        borderRadius: '6px',
                        padding: '10px',
                        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                      }}
                      labelFormatter={(label) => `${label}蟷ｴ`}
                      wrapperStyle={{ zIndex: 1000 }}
                    />
                    <Legend />
                    <Area type="monotone" dataKey="螳壼ｹｴ騾閨ｷ" stackId="1" stroke="#3B82F6" fill="#3B82F6" />
                    <Area type="monotone" dataKey="閾ｪ蟾ｱ驛ｽ蜷磯閨ｷ" stackId="1" stroke="#F59E0B" fill="#F59E0B" />
                    <Area type="monotone" dataKey="譌ｩ譛滄閨ｷ" stackId="1" stroke="#10B981" fill="#10B981" />
                  </AreaChart>
                </ResponsiveContainer>
              </div>
              <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="bg-blue-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-600">邏ｯ險亥ｮ壼ｹｴ騾閨ｷ閠・焚</p>
                  <p className="text-2xl font-bold text-blue-600">
                    {retirementPrediction.reduce((sum, y) => sum + y.螳壼ｹｴ騾閨ｷ, 0)}蜷・
                  </p>
                </div>
                <div className="bg-amber-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-600">邏ｯ險郁・蟾ｱ驛ｽ蜷磯閨ｷ閠・焚</p>
                  <p className="text-2xl font-bold text-amber-600">
                    {retirementPrediction.reduce((sum, y) => sum + y.閾ｪ蟾ｱ驛ｽ蜷磯閨ｷ, 0)}蜷・
                  </p>
                </div>
                <div className="bg-green-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-600">邏ｯ險亥ｿ・ｦ∵治逕ｨ謨ｰ</p>
                  <p className="text-2xl font-bold text-green-600">
                    {retirementPrediction.reduce((sum, y) => sum + y.蠢・ｦ∵治逕ｨ謨ｰ, 0)}蜷・
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* 謗｡逕ｨ繧ｳ繧ｹ繝亥・譫・*/}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>謗｡逕ｨ謌ｦ逡･蛻･繧ｳ繧ｹ繝亥・譫・/CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={recruitmentCost}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="type" />
                      <YAxis tickFormatter={(value) => `${(value / 1000000).toFixed(1)}M`} />
                      <Tooltip 
                        formatter={(value) => {
                          const numValue = typeof value === 'number' ? value : parseFloat(value as string);
                          return `ﾂ･${(numValue ?? 0).toLocaleString()}`;
                        }}
                        contentStyle={{ 
                          backgroundColor: '#ffffff', 
                          border: '1px solid #e5e7eb', 
                          borderRadius: '6px',
                          padding: '10px',
                          boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                        }}
                        wrapperStyle={{ zIndex: 1000 }}
                      />
                      <Legend />
                      <Bar dataKey="謗｡逕ｨ雋ｻ" fill="#3B82F6" />
                      <Bar dataKey="遐比ｿｮ雋ｻ" fill="#10B981" />
                      <Bar dataKey="莠ｺ莉ｶ雋ｻ" fill="#F59E0B" />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>謗｡逕ｨ讒区・豈・/CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={recruitmentCost}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        label={({ type, count }) => `${type}: ${count}蜷港}
                        outerRadius={100}
                        fill="#8884d8"
                        dataKey="count"
                      >
                        {recruitmentCost.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                        ))}
                      </Pie>
                      <Tooltip 
                        formatter={(value: number) => `${value}蜷港}
                        contentStyle={{ 
                          backgroundColor: '#ffffff', 
                          border: '1px solid #e5e7eb', 
                          borderRadius: '6px',
                          padding: '10px',
                          boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                        }}
                        wrapperStyle={{ zIndex: 1000 }}
                      />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
                <div className="mt-4">
                  <p className="text-sm text-gray-600">邱乗治逕ｨ繧ｳ繧ｹ繝・/p>
                  <p className="text-3xl font-bold text-blue-600">
                    ﾂ･{(recruitmentCost.reduce((sum, c) => sum + (c.蜷郁ｨ・?? 0), 0) ?? 0).toLocaleString()}
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* 驛ｨ鄂ｲ蛻･蠢・ｦ∽ｺｺ蜩｡ */}
          <Card>
            <CardHeader>
              <CardTitle>驛ｨ鄂ｲ蛻･謗｡逕ｨ蠢・ｦ∽ｺｺ蜩｡</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        驛ｨ鄂ｲ
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        迴ｾ蝨ｨ莠ｺ謨ｰ
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        蟷ｳ蝮・ｹｴ鮨｢
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        騾閨ｷ繝ｪ繧ｹ繧ｯ莠ｺ謨ｰ
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        謗ｨ螂ｨ謗｡逕ｨ謨ｰ
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {departmentNeeds.slice(0, 10).map((dept, index) => (
                      <tr key={dept.department} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {dept.department}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {dept.迴ｾ蝨ｨ莠ｺ謨ｰ}蜷・
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {dept.蟷ｳ蝮・ｹｴ鮨｢}豁ｳ
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          <span className={dept.騾閨ｷ繝ｪ繧ｹ繧ｯ莠ｺ謨ｰ > 2 ? 'text-red-600 font-semibold' : ''}>
                            {dept.騾閨ｷ繝ｪ繧ｹ繧ｯ莠ｺ謨ｰ}蜷・
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          <span className="text-blue-600 font-semibold">{dept.謗ｨ螂ｨ謗｡逕ｨ謨ｰ}蜷・/span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>

          {/* 謗｡逕ｨ謗ｨ螂ｨ繧｢繧ｯ繧ｷ繝ｧ繝ｳ */}
          <Card>
            <CardHeader>
              <CardTitle>謗｡逕ｨ謗ｨ螂ｨ繧｢繧ｯ繧ｷ繝ｧ繝ｳ</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-semibold text-blue-900 mb-2">蜆ｪ蜈域治逕ｨ驛ｨ鄂ｲ</h4>
                  <ul className="list-disc list-inside text-sm text-blue-800 space-y-1">
                    {departmentNeeds.slice(0, 3).map(dept => (
                      <li key={dept.department}>
                        {dept.department}: {dept.謗ｨ螂ｨ謗｡逕ｨ謨ｰ}蜷阪・謗｡逕ｨ繧呈耳螂ｨ・磯閨ｷ繝ｪ繧ｹ繧ｯ{dept.騾閨ｷ繝ｪ繧ｹ繧ｯ莠ｺ謨ｰ}蜷搾ｼ・
                      </li>
                    ))}
                  </ul>
                </div>
                
                <div className="bg-amber-50 p-4 rounded-lg">
                  <h4 className="font-semibold text-amber-900 mb-2">謗｡逕ｨ譎よ悄縺ｮ謠先｡・/h4>
                  <p className="text-sm text-amber-800">
                    螳壼ｹｴ騾閨ｷ閠・・螟壹＞3-4譛医↓蜷代￠縺ｦ縲∝燕蟷ｴ10譛医°繧画治逕ｨ豢ｻ蜍輔ｒ髢句ｧ九☆繧九％縺ｨ繧呈耳螂ｨ縺励∪縺吶・
                    迚ｹ縺ｫ逵玖ｭｷ蟶ｫ繝ｻ莉玖ｭｷ螢ｫ縺ｮ謗｡逕ｨ縺ｯ遶ｶ莠峨′豼縺励＞縺溘ａ縲∵掠譛溘・豢ｻ蜍暮幕蟋九′驥崎ｦ√〒縺吶・
                  </p>
                </div>
                
                <div className="bg-green-50 p-4 rounded-lg">
                  <h4 className="font-semibold text-green-900 mb-2">繧ｳ繧ｹ繝域怙驕ｩ蛹悶・謠先｡・/h4>
                  <p className="text-sm text-green-800">
                    迴ｾ蝨ｨ縺ｮ縲鶏recruitmentStrategy === 'balanced' ? '繝舌Λ繝ｳ繧ｹ蝙・ : 
                            recruitmentStrategy === 'experienced' ? '邨碁ｨ楢・㍾隕・ :
                            recruitmentStrategy === 'newgrad' ? '譁ｰ蜊帝㍾隕・ : '譟碑ｻ滄寐逕ｨ驥崎ｦ・}縲・
                    謌ｦ逡･縺ｧ縺ｮ邱上さ繧ｹ繝医・ﾂ･{(recruitmentCost.reduce((sum, c) => sum + (c.蜷郁ｨ・?? 0), 0) ?? 0).toLocaleString()}縺ｧ縺吶・
                    {recruitmentStrategy !== 'flexible' && '譟碑ｻ滄寐逕ｨ驥崎ｦ匁姶逡･縺ｫ螟画峩縺吶ｋ縺薙→縺ｧ縲√さ繧ｹ繝医ｒ20-30%蜑頑ｸ帙〒縺阪ｋ蜿ｯ閭ｽ諤ｧ縺後≠繧翫∪縺吶・}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* 繧｢繧ｯ繧ｷ繝ｧ繝ｳ繝懊ち繝ｳ */}
          <div className="flex gap-4">
            <button 
              onClick={() => exportToPDF({
                title: '謗｡逕ｨ險育判繧ｷ繝溘Η繝ｬ繝ｼ繧ｷ繝ｧ繝ｳ繝ｬ繝昴・繝・,
                facility: selectedFacility,
                reportType: 'recruitment-planning',
                elementId: 'report-content',
                dateRange: `${new Date().getFullYear()}蟷ｴ - ${targetYear}蟷ｴ`
              })}
              className="pdf-exclude bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition"
            >
              PDF繝繧ｦ繝ｳ繝ｭ繝ｼ繝・
            </button>
          </div>

        </div>
      </div><CategoryTopButton categoryPath="/reports/simulation" categoryName="繧ｷ繝溘Η繝ｬ繝ｼ繧ｷ繝ｧ繝ｳ" /></div>
  );
}

export default function Page() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Content />
    </Suspense>
  );
}