'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Switch } from "@/components/ui/switch";
import {
  ArrowLeft,
  Search,
  Filter,
  Plus,
  Edit,
  Trash2,
  RefreshCw,
  FileText,
  Sparkles,
  BookOpen,
  Target,
  Users,
  CheckCircle2,
  AlertCircle,
  TrendingUp,
  Brain,
  Zap,
  Database,
  Award,
  Settings,
  BarChart3,
  Lightbulb,
  ListChecks
} from 'lucide-react';
import Link from 'next/link';
import { QuestionBank, selectQuestionsForStaff, Question } from '@/data/questionBank';
import { TrainingIntegrationService } from '@/services/trainingIntegrationService';
import { ExperienceLevelsV3 } from '@/types/evaluation-v3';

interface DynamicQuestionPreview {
  categoryCode: string;
  categoryName: string;
  experienceLevel: string;
  questions: Question[];
  trainingBased: string[];
  autoGenerated: string[];
}

export default function QuestionManagementPage() {
  const [activeTab, setActiveTab] = useState('bank');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedLevel, setSelectedLevel] = useState('all');
  const [questions, setQuestions] = useState<Question[]>(QuestionBank);
  const [previewData, setPreviewData] = useState<DynamicQuestionPreview | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);

  // カテゴリーマッピング
  const categories = {
    'all': '全カテゴリー',
    'C01': '専門技術・スキル',
    'C02': '対人関係・ケア',
    'C03': '安全・品質管理'
  };

  // フィルタリング
  const filteredQuestions = questions.filter(q => {
    if (selectedCategory !== 'all' && q.categoryCode !== selectedCategory) return false;
    if (selectedLevel !== 'all' && !q.experienceLevels.includes(selectedLevel)) return false;
    if (searchQuery && !q.question.toLowerCase().includes(searchQuery.toLowerCase())) return false;
    return true;
  });

  // 動的設問プレビュー生成
  const generatePreview = async () => {
    setIsGenerating(true);
    try {
      // サンプルパラメータで設問を選定
      const selectedQuestions = selectQuestionsForStaff({
        experienceLevel: 'young',
        completedTrainings: ['infection_control', 'safety_management'],
        facilityType: 'acute',
        jobCategory: 'nurse',
        categoryCode: 'C01',
        requiredCount: 10,
        year: 2025
      });

      // 研修ベースの推奨を取得
      const trainingRecommendations = await TrainingIntegrationService.recommendQuestionsBasedOnTraining({
        staffId: 'sample',
        experienceLevel: 'young',
        year: 2025,
        categoryCode: 'C01'
      });

      setPreviewData({
        categoryCode: 'C01',
        categoryName: '専門技術・スキル',
        experienceLevel: 'young',
        questions: selectedQuestions,
        trainingBased: trainingRecommendations.mandatoryQuestions,
        autoGenerated: [`2025年度の感染対策研修で学んだ内容を実践できているか？`]
      });

      setActiveTab('preview');
    } catch (error) {
      console.error('Preview generation failed:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  // 評価者のバッジ
  const getEvaluatorBadge = (evaluator: string) => {
    switch (evaluator) {
      case 'superior': return <Badge className="bg-blue-100 text-blue-800">上司</Badge>;
      case 'self': return <Badge className="bg-purple-100 text-purple-800">本人</Badge>;
      case 'both': return <Badge className="bg-indigo-100 text-indigo-800">両方</Badge>;
      default: return <Badge>-</Badge>;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* ヘッダー */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Link href="/evaluation-design">
                <Button variant="ghost" size="sm">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  評価制度設計に戻る
                </Button>
              </Link>
              <div>
                <h1 className="text-2xl font-bold flex items-center gap-2">
                  <Sparkles className="w-7 h-7 text-purple-600" />
                  動的設問管理
                </h1>
                <p className="text-sm text-gray-600 mt-1">
                  研修履歴と経験レベルに応じた設問の自動選定
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* メインヘッダーカード */}
      <div className="max-w-7xl mx-auto p-6">
        <Card className="mb-6 border-2 border-purple-200 bg-gradient-to-r from-purple-50 to-indigo-50">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-3 bg-purple-500 rounded-lg">
                  <Brain className="h-6 w-6 text-white" />
                </div>
                <div>
                  <CardTitle className="text-xl">AI動的設問システム</CardTitle>
                  <CardDescription className="mt-1">
                    職員の成長段階に合わせた最適な評価設問を自動生成します
                  </CardDescription>
                </div>
              </div>
              <div className="flex gap-2">
                <Badge className="bg-purple-100 text-purple-800" variant="secondary">
                  <Zap className="w-3 h-3 mr-1" />
                  AI最適化
                </Badge>
                <Badge className="bg-green-100 text-green-800" variant="secondary">
                  <CheckCircle2 className="w-3 h-3 mr-1" />
                  {questions.length} 設問
                </Badge>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-4 gap-4">
              <div className="p-4 bg-white rounded-lg border border-purple-200">
                <div className="flex items-center gap-2 mb-2">
                  <Database className="h-5 w-5 text-purple-600" />
                  <span className="text-sm font-medium text-gray-700">設問バンク</span>
                </div>
                <p className="text-2xl font-bold text-purple-600">{questions.length}</p>
                <p className="text-xs text-gray-600 mt-1">利用可能設問</p>
              </div>
              <div className="p-4 bg-white rounded-lg border border-blue-200">
                <div className="flex items-center gap-2 mb-2">
                  <BookOpen className="h-5 w-5 text-blue-600" />
                  <span className="text-sm font-medium text-gray-700">研修連動</span>
                </div>
                <p className="text-2xl font-bold text-blue-600">
                  {questions.filter(q => q.requiredTrainings && q.requiredTrainings.length > 0).length}
                </p>
                <p className="text-xs text-gray-600 mt-1">研修基準設問</p>
              </div>
              <div className="p-4 bg-white rounded-lg border border-green-200">
                <div className="flex items-center gap-2 mb-2">
                  <Lightbulb className="h-5 w-5 text-green-600" />
                  <span className="text-sm font-medium text-gray-700">自動生成</span>
                </div>
                <p className="text-2xl font-bold text-green-600">15</p>
                <p className="text-xs text-gray-600 mt-1">今月作成</p>
              </div>
              <div className="p-4 bg-white rounded-lg border border-orange-200">
                <div className="flex items-center gap-2 mb-2">
                  <TrendingUp className="h-5 w-5 text-orange-600" />
                  <span className="text-sm font-medium text-gray-700">効果性</span>
                </div>
                <p className="text-2xl font-bold text-orange-600">
                  {Math.round(
                    questions.reduce((sum, q) => sum + (q.effectiveness || 0), 0) / 
                    questions.filter(q => q.effectiveness).length
                  )}%
                </p>
                <p className="text-xs text-gray-600 mt-1">平均スコア</p>
              </div>
            </div>
            <Alert className="mt-4 border-purple-200 bg-purple-50/50">
              <Sparkles className="h-4 w-4 text-purple-600" />
              <AlertDescription className="text-purple-800">
                AIが各職員の研修履歴、経験年数、スキルレベルを分析し、最適な評価設問を自動選定します。
              </AlertDescription>
            </Alert>
          </CardContent>
        </Card>

        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid grid-cols-3 w-full max-w-md">
            <TabsTrigger value="bank">設問バンク</TabsTrigger>
            <TabsTrigger value="preview">動的プレビュー</TabsTrigger>
            <TabsTrigger value="templates">テンプレート</TabsTrigger>
          </TabsList>

          {/* 設問バンクタブ */}
          <TabsContent value="bank" className="space-y-6 mt-6">
            <Card className="border-2 border-gray-200 shadow-lg hover:shadow-xl transition-shadow">
              <CardHeader className="bg-gradient-to-r from-gray-50 to-gray-100">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="p-3 bg-gray-600 rounded-lg">
                      <Database className="h-6 w-6 text-white" />
                    </div>
                    <div>
                      <CardTitle className="text-xl">設問バンク管理</CardTitle>
                      <CardDescription className="mt-1">
                        評価設問の一元管理と動的選定基準の設定
                      </CardDescription>
                    </div>
                  </div>
                  <Button className="bg-purple-600 hover:bg-purple-700 text-white">
                    <Plus className="w-4 h-4 mr-2" />
                    新規設問追加
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                {/* フィルター */}
                <div className="p-4 bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg border border-gray-200 mb-6">
                  <div className="flex items-center gap-2 mb-3">
                    <Filter className="h-4 w-4 text-gray-600" />
                    <span className="font-medium text-gray-700">設問を絞り込み</span>
                  </div>
                  <div className="flex gap-3">
                    <div className="flex-1">
                      <div className="relative">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                        <Input
                          placeholder="キーワードで検索..."
                          value={searchQuery}
                          onChange={(e) => setSearchQuery(e.target.value)}
                          className="pl-10 border-gray-300 bg-white"
                        />
                      </div>
                    </div>
                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                    <SelectTrigger className="w-[200px]">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.entries(categories).map(([value, label]) => (
                        <SelectItem key={value} value={value}>{label}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <Select value={selectedLevel} onValueChange={setSelectedLevel}>
                    <SelectTrigger className="w-[200px]">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">全レベル</SelectItem>
                      <SelectItem value="new">新人</SelectItem>
                      <SelectItem value="young">若手</SelectItem>
                      <SelectItem value="midlevel">中堅</SelectItem>
                      <SelectItem value="veteran">ベテラン</SelectItem>
                    </SelectContent>
                  </Select>
                  </div>
                </div>

                {/* 設問リスト */}
                <div className="border rounded-lg overflow-hidden">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="w-[50px]">ID</TableHead>
                        <TableHead>設問内容</TableHead>
                        <TableHead>カテゴリー</TableHead>
                        <TableHead>対象レベル</TableHead>
                        <TableHead>配点</TableHead>
                        <TableHead>評価者</TableHead>
                        <TableHead>経験レベル</TableHead>
                        <TableHead>使用回数</TableHead>
                        <TableHead className="text-right">操作</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredQuestions.slice(0, 10).map((question) => (
                        <TableRow key={question.id}>
                          <TableCell className="font-mono text-xs">{question.id}</TableCell>
                          <TableCell className="max-w-md">
                            <p className="text-sm line-clamp-2">{question.question}</p>
                            {question.requiredTrainings && question.requiredTrainings.length > 0 && (
                              <div className="flex gap-1 mt-1">
                                <BookOpen className="w-3 h-3 text-blue-600" />
                                <span className="text-xs text-blue-600">
                                  研修連動
                                </span>
                              </div>
                            )}
                          </TableCell>
                          <TableCell>
                            <Badge variant="outline">
                              {categories[question.categoryCode as keyof typeof categories] || question.categoryCode}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <div className="flex flex-wrap gap-1">
                              {question.experienceLevels.slice(0, 2).map(level => (
                                <Badge key={level} variant="secondary" className="text-xs">
                                  {ExperienceLevelsV3[level.toUpperCase().replace('-', '_') as keyof typeof ExperienceLevelsV3]?.label || level}
                                </Badge>
                              ))}
                              {question.experienceLevels.length > 2 && (
                                <Badge variant="secondary" className="text-xs">
                                  +{question.experienceLevels.length - 2}
                                </Badge>
                              )}
                            </div>
                          </TableCell>
                          <TableCell>{question.points}点</TableCell>
                          <TableCell>{getEvaluatorBadge(question.evaluator)}</TableCell>
                          <TableCell>
                            <Badge variant="outline">
                              {question.experienceLevels.join(', ')}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <span className="text-sm text-gray-600">{question.usageCount}</span>
                          </TableCell>
                          <TableCell className="text-right">
                            <div className="flex justify-end gap-1">
                              <Button variant="ghost" size="sm">
                                <Edit className="w-4 h-4" />
                              </Button>
                              <Button variant="ghost" size="sm">
                                <Trash2 className="w-4 h-4" />
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>

                {/* 統計情報 */}
                <div className="grid grid-cols-4 gap-4 mt-6">
                  <Card className="bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <ListChecks className="h-5 w-5 text-blue-600" />
                        <Badge className="bg-blue-600 text-white">全体</Badge>
                      </div>
                      <div className="text-2xl font-bold text-blue-900">{questions.length}</div>
                      <p className="text-sm text-blue-700">総設問数</p>
                    </CardContent>
                  </Card>
                  <Card className="bg-gradient-to-br from-green-50 to-green-100 border-green-200">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <BookOpen className="h-5 w-5 text-green-600" />
                        <Badge className="bg-green-600 text-white">連動</Badge>
                      </div>
                      <div className="text-2xl font-bold text-green-900">
                        {questions.filter(q => q.requiredTrainings && q.requiredTrainings.length > 0).length}
                      </div>
                      <p className="text-sm text-green-700">研修連動設問</p>
                    </CardContent>
                  </Card>
                  <Card className="bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <FileText className="h-5 w-5 text-purple-600" />
                        <Badge className="bg-purple-600 text-white">テンプレート</Badge>
                      </div>
                      <div className="text-2xl font-bold text-purple-900">
                        {questions.filter(q => q.template).length}
                      </div>
                      <p className="text-sm text-purple-700">テンプレート数</p>
                    </CardContent>
                  </Card>
                  <Card className="bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <BarChart3 className="h-5 w-5 text-orange-600" />
                        <Badge className="bg-orange-600 text-white">効果</Badge>
                      </div>
                      <div className="text-2xl font-bold text-orange-900">
                        {Math.round(
                          questions.reduce((sum, q) => sum + (q.effectiveness || 0), 0) / 
                          questions.filter(q => q.effectiveness).length
                        )}%
                      </div>
                      <p className="text-sm text-orange-700">平均効果性</p>
                    </CardContent>
                  </Card>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* 動的プレビュータブ */}
          <TabsContent value="preview" className="space-y-6 mt-6">
            <Card className="border-2 border-indigo-200 shadow-lg hover:shadow-xl transition-shadow">
              <CardHeader className="bg-gradient-to-r from-indigo-50 to-purple-50">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="p-3 bg-indigo-500 rounded-lg">
                      <Lightbulb className="h-6 w-6 text-white" />
                    </div>
                    <div>
                      <CardTitle className="text-xl">動的設問プレビュー</CardTitle>
                      <CardDescription className="mt-1">
                        実際の条件でAIが選定する設問をシミュレーション
                      </CardDescription>
                    </div>
                  </div>
                  <Button 
                    onClick={generatePreview}
                    disabled={isGenerating}
                    className="bg-indigo-600 hover:bg-indigo-700 text-white"
                  >
                    {isGenerating ? (
                      <><RefreshCw className="w-4 h-4 mr-2 animate-spin" /> 生成中...</>
                    ) : (
                      <><Zap className="w-4 h-4 mr-2" /> プレビュー生成</>
                    )}
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                {/* プレビュー設定 */}
                <div className="p-5 bg-gradient-to-br from-gray-50 to-gray-100 rounded-lg border border-gray-200 mb-6">
                  <h3 className="font-bold text-lg flex items-center gap-2 mb-4">
                    <Settings className="h-5 w-5 text-gray-700" />
                    シミュレーション設定
                  </h3>
                  <div className="grid grid-cols-3 gap-4">
                  <div>
                    <Label>経験レベル</Label>
                    <Select defaultValue="young">
                      <SelectTrigger className="mt-2">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="new">新人（～1年）</SelectItem>
                        <SelectItem value="young">若手（2～3年）</SelectItem>
                        <SelectItem value="midlevel">中堅（4～10年）</SelectItem>
                        <SelectItem value="veteran">ベテラン（11年～）</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label>施設タイプ</Label>
                    <Select defaultValue="acute">
                      <SelectTrigger className="mt-2">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="acute">急性期病院</SelectItem>
                        <SelectItem value="rehab">回復期リハビリ</SelectItem>
                        <SelectItem value="elderly">介護老人保健施設</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label>職種</Label>
                    <Select defaultValue="nurse">
                      <SelectTrigger className="mt-2">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="nurse">看護師</SelectItem>
                        <SelectItem value="care-worker">介護職</SelectItem>
                        <SelectItem value="therapist">リハビリ職</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                </div>

                <div className="mb-6">
                  <Label>完了済み研修</Label>
                  <div className="flex flex-wrap gap-2 mt-2">
                    <Badge className="bg-green-100 text-green-800">
                      <CheckCircle2 className="w-3 h-3 mr-1" />
                      感染対策研修
                    </Badge>
                    <Badge className="bg-green-100 text-green-800">
                      <CheckCircle2 className="w-3 h-3 mr-1" />
                      医療安全研修
                    </Badge>
                    <Badge className="bg-green-100 text-green-800">
                      <CheckCircle2 className="w-3 h-3 mr-1" />
                      身体拘束適正化研修
                    </Badge>
                  </div>
                </div>

                <Button
                  onClick={generatePreview}
                  disabled={isGenerating}
                  className="w-full"
                >
                  {isGenerating ? (
                    <>
                      <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                      プレビュー生成中...
                    </>
                  ) : (
                    <>
                      <Sparkles className="w-4 h-4 mr-2" />
                      これらの条件で設問をプレビュー
                    </>
                  )}
                </Button>

                {/* プレビュー結果 */}
                {previewData && (
                  <div className="mt-6 space-y-4">
                    <Alert className="border-indigo-200 bg-indigo-50">
                      <CheckCircle2 className="h-4 w-4 text-indigo-600" />
                      <AlertTitle>プレビュー生成完了</AlertTitle>
                      <AlertDescription>
                        カテゴリー「{previewData.categoryName}」で{previewData.questions.length}件の設問が選定されました
                      </AlertDescription>
                    </Alert>

                    <div className="space-y-3">
                      <h4 className="font-semibold">選定された設問:</h4>
                      {previewData.questions.map((q, index) => (
                        <div key={q.id} className="p-3 bg-white border rounded-lg">
                          <div className="flex justify-between items-start">
                            <div className="flex-1">
                              <p className="font-medium">{index + 1}. {q.question}</p>
                              <div className="flex gap-2 mt-2">
                                <Badge variant="outline">{q.points}点</Badge>
                                {getEvaluatorBadge(q.evaluator)}
                                {q.requiredTrainings && q.requiredTrainings.length > 0 && (
                                  <Badge className="bg-blue-100 text-blue-800">
                                    <BookOpen className="w-3 h-3 mr-1" />
                                    研修連動
                                  </Badge>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>

                    {previewData.trainingBased.length > 0 && (
                      <div>
                        <h4 className="font-semibold mb-2">研修ベース推奨設問:</h4>
                        <div className="space-y-2">
                          {previewData.trainingBased.map((q, index) => (
                            <div key={index} className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                              <p className="text-sm">{q}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {previewData.autoGenerated.length > 0 && (
                      <div>
                        <h4 className="font-semibold mb-2">AI自動生成設問:</h4>
                        <div className="space-y-2">
                          {previewData.autoGenerated.map((q, index) => (
                            <div key={index} className="p-3 bg-purple-50 border border-purple-200 rounded-lg">
                              <p className="text-sm">{q}</p>
                              <Badge className="mt-2 bg-purple-100 text-purple-800">
                                <Sparkles className="w-3 h-3 mr-1" />
                                AI生成
                              </Badge>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* テンプレートタブ */}
          <TabsContent value="templates" className="space-y-6 mt-6">
            <Card>
              <CardHeader>
                <CardTitle>設問テンプレート</CardTitle>
                <CardDescription>
                  よく使用される設問の組み合わせをテンプレートとして管理
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 gap-4">
                  <Card>
                    <CardContent className="p-4">
                      <h3 className="font-semibold mb-2">新人向けテンプレート</h3>
                      <p className="text-sm text-gray-600 mb-3">基本的な技術と姿勢を評価</p>
                      <div className="flex justify-between items-center">
                        <Badge>15設問</Badge>
                        <Button size="sm" variant="outline">使用する</Button>
                      </div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardContent className="p-4">
                      <h3 className="font-semibold mb-2">中堅向けテンプレート</h3>
                      <p className="text-sm text-gray-600 mb-3">応用技術とリーダーシップを評価</p>
                      <div className="flex justify-between items-center">
                        <Badge>20設問</Badge>
                        <Button size="sm" variant="outline">使用する</Button>
                      </div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardContent className="p-4">
                      <h3 className="font-semibold mb-2">ベテラン向けテンプレート</h3>
                      <p className="text-sm text-gray-600 mb-3">専門性と指導力を評価</p>
                      <div className="flex justify-between items-center">
                        <Badge>18設問</Badge>
                        <Button size="sm" variant="outline">使用する</Button>
                      </div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardContent className="p-4">
                      <h3 className="font-semibold mb-2">管理職向けテンプレート</h3>
                      <p className="text-sm text-gray-600 mb-3">マネジメント能力を評価</p>
                      <div className="flex justify-between items-center">
                        <Badge>22設問</Badge>
                        <Button size="sm" variant="outline">使用する</Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}