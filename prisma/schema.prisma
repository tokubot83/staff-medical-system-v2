// 医療法人厚生会 統合データベーススキーマ
// 3つのシステム（staff-medical-system、staff-chart-system、voicedrive-v100）で共通利用

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"  // 開発環境用にSQLiteを使用（本番はPostgreSQLに変更）
  url      = env("DATABASE_URL")
}

// 施設マスタ
model Facility {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  type      String   // hospital, clinic, nursing_home
  address   String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  departments Department[]
  employees   Employee[]
  
  @@map("facilities")
}

// 部署マスタ
model Department {
  id         String   @id @default(cuid())
  code       String   @unique
  name       String
  facilityId String
  parentId   String?  // 親部署ID（階層構造）
  level      Int      // 階層レベル
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  facility   Facility     @relation(fields: [facilityId], references: [id])
  parent     Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children   Department[] @relation("DepartmentHierarchy")
  employees  Employee[]
  
  @@map("departments")
}

// 役職マスタ
model Position {
  id           String   @id @default(cuid())
  code         String   @unique
  name         String
  level        Int      // 職位レベル（権限管理用）
  accountType  String   // CHAIRMAN, DIRECTOR, DEPARTMENT_HEAD等
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  employees Employee[]
  
  @@map("positions")
}

// 職員マスタ（全システム共通）
model Employee {
  id              String    @id @default(cuid())
  employeeCode    String    @unique
  name            String
  nameKana        String
  email           String    @unique
  phone           String
  emergencyPhone  String?
  address         String?
  birthDate       DateTime
  gender          String
  hireDate        DateTime
  departmentId    String
  positionId      String
  facilityId      String
  supervisorId    String?   // 上司のID
  status          String    @default("active") // active, leave, retired
  retiredAt       DateTime?
  permissionLevel Int       @default(1) // 1-13の権限レベル
  avatar          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // リレーション
  department   Department    @relation(fields: [departmentId], references: [id])
  position     Position      @relation(fields: [positionId], references: [id])
  facility     Facility      @relation(fields: [facilityId], references: [id])
  supervisor   Employee?     @relation("EmployeeHierarchy", fields: [supervisorId], references: [id])
  subordinates Employee[]    @relation("EmployeeHierarchy")
  
  // 関連データ
  evaluations        Evaluation[]
  evaluatorFor       Evaluation[] @relation("EvaluatorRelation")
  twoAxisEvaluations TwoAxisEvaluation[]
  interviews  Interview[]
  interviewsAsInterviewer Interview[] @relation("InterviewerRelation")
  trainings         Training[]
  healthRecords     HealthRecord[]
  skills            EmployeeSkill[]
  assignmentHistory AssignmentHistory[]
  systemAccounts    SystemAccount[]
  motivationHistory StaffMotivationHistory[]
  
  @@index([departmentId, facilityId])
  @@index([status])
  @@map("employees")
}

// 評価データ
model Evaluation {
  id               String   @id @default(cuid())
  employeeId       String
  evaluatorId      String
  period           String   // 2024上期、2024下期等
  overallScore     String   // S, A, B, C, D
  performanceScore Float    // 0-100
  skillScore       Float    // 0-100
  teamworkScore    Float    // 0-100
  leadershipScore  Float?   // 0-100（役職者のみ）
  growthScore      Float    // 0-100
  comments         String?
  status           String   @default("draft") // draft, submitted, approved
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  employee  Employee @relation(fields: [employeeId], references: [id])
  evaluator Employee @relation("EvaluatorRelation", fields: [evaluatorId], references: [id])
  
  // 2軸評価との関連
  twoAxisEvaluations TwoAxisEvaluation[]
  
  @@unique([employeeId, period])
  @@map("evaluations")
}

// 2軸評価データ
model TwoAxisEvaluation {
  id                   String   @id @default(cuid())
  employeeId           String
  evaluationId         String
  evaluationPeriod     String   // 2024-H2等
  score                Float    // 評価シート点数 (0-100)
  facilityRank         Int      // 施設内順位
  facilityTotal        Int      // 施設内総数
  facilityEvaluation   String   // S,A,B,C,D
  facilityPercentile    Float    // 施設内パーセンタイル
  corporateRank        Int      // 法人内順位
  corporateTotal       Int      // 法人内総数
  corporateEvaluation  String   // S,A,B,C,D
  corporatePercentile  Float    // 法人内パーセンタイル
  finalEvaluation      String   // S+,S,A+,A,B,C,D
  jobCategory          String   // 職種（看護職、介護職等）
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  employee    Employee   @relation(fields: [employeeId], references: [id])
  evaluation  Evaluation @relation(fields: [evaluationId], references: [id])
  
  @@unique([employeeId, evaluationPeriod])
  @@index([jobCategory, evaluationPeriod])
  @@map("two_axis_evaluations")
}

// 評価マトリクス（マスタデータ）
model EvaluationMatrix {
  corporateEval String   // S,A,B,C,D
  facilityEval  String   // S,A,B,C,D
  finalEval     String   // S+,S,A+,A,B,C,D
  description   String?  // 評価の説明
  
  @@id([corporateEval, facilityEval])
  @@map("evaluation_matrix")
}


// 研修履歴
model Training {
  id              String   @id @default(cuid())
  employeeId      String
  trainingName    String
  category        String   // medical, safety, management, skill
  provider        String?  // 研修提供者
  date            DateTime
  hours           Float
  score           Float?   // テストスコア
  certificate     Boolean  @default(false)
  certificateNo   String?
  effectiveness   Float?   // 効果測定結果
  expiryDate      DateTime? // 資格の有効期限
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  employee Employee @relation(fields: [employeeId], references: [id])
  
  @@map("trainings")
}

// 健康管理
model HealthRecord {
  id                  String   @id @default(cuid())
  employeeId          String
  checkupDate         DateTime
  healthStatus        String   // good, caution, alert
  healthScore         Float    // 0-100
  stressIndex         Float    // 0-100
  bmi                 Float?
  bloodPressure       String?
  risks               String? // 健康リスク項目（JSON形式）
  recommendations     String? // 推奨事項（JSON形式）
  nextCheckupDate     DateTime
  occupationalDoctor  String?  // 産業医所見
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  employee Employee @relation(fields: [employeeId], references: [id])
  
  @@map("health_records")
}

// スキル管理
model Skill {
  id         String   @id @default(cuid())
  code       String   @unique
  name       String
  category   String   // medical, nursing, administrative, it
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  employees EmployeeSkill[]
  
  @@map("skills")
}

// 職員スキル（中間テーブル）
model EmployeeSkill {
  id           String   @id @default(cuid())
  employeeId   String
  skillId      String
  level        Int      // 1-5
  certifiedAt  DateTime?
  certifiedBy  String?
  expiryDate   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  employee Employee @relation(fields: [employeeId], references: [id])
  skill    Skill    @relation(fields: [skillId], references: [id])
  
  @@unique([employeeId, skillId])
  @@map("employee_skills")
}

// 配属履歴
model AssignmentHistory {
  id           String   @id @default(cuid())
  employeeId   String
  departmentId String
  positionId   String
  facilityId   String
  startDate    DateTime
  endDate      DateTime?
  reason       String   // promotion, transfer, reorganization
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  employee   Employee   @relation(fields: [employeeId], references: [id])
  // department Department @relation(fields: [departmentId], references: [id])
  // position   Position   @relation(fields: [positionId], references: [id])
  // facility   Facility   @relation(fields: [facilityId], references: [id])
  
  @@map("assignment_history")
}

// システムアカウント（各システムとの連携用）
model SystemAccount {
  id           String   @id @default(cuid())
  employeeId   String
  systemName   String   // staff-medical, staff-chart, voicedrive
  accountId    String   // 各システムでのユーザーID
  isActive     Boolean  @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  employee Employee @relation(fields: [employeeId], references: [id])
  
  @@unique([employeeId, systemName])
  @@unique([systemName, accountId])
  @@map("system_accounts")
}

// 監査ログ（データ変更履歴）
model AuditLog {
  id          String   @id @default(cuid())
  tableName   String
  recordId    String
  action      String   // create, update, delete
  userId      String
  changes     Json     // 変更内容のJSON
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@index([tableName, recordId])
  @@index([userId])
  @@map("audit_logs")
}

// ============================================
// V5面談システム - 動機タイプ関連テーブル
// ============================================

// 動機タイプマスター
model MotivationType {
  id           String   @id
  typeName     String   @map("type_name")
  label        String
  description  String
  icon         String?
  color        String?
  approach     String
  keywords     Json?
  displayOrder Int      @default(0) @map("display_order")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  staffHistory        StaffMotivationHistory[]
  interviews          Interview[]
  actions             MotivationTypeAction[]
  compatibilityFrom   MotivationTypeCompatibility[] @relation("CompatibilityFrom")
  compatibilityTo     MotivationTypeCompatibility[] @relation("CompatibilityTo")

  @@map("motivation_types")
}

// 職員動機タイプ履歴
model StaffMotivationHistory {
  id               String           @id @default(cuid())
  employeeId       String           @map("employee_id")
  motivationTypeId String           @map("motivation_type_id")
  interviewId      String?          @map("interview_id")
  assessmentDate   DateTime         @map("assessment_date")
  assessedBy       String?          @map("assessed_by")
  confidenceLevel  ConfidenceLevel  @default(MEDIUM) @map("confidence_level")
  notes            String?
  isPrimary        Boolean          @default(true) @map("is_primary")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  // Relations
  employee       Employee         @relation(fields: [employeeId], references: [id])
  motivationType MotivationType   @relation(fields: [motivationTypeId], references: [id])
  interview      Interview?       @relation(fields: [interviewId], references: [id])

  @@index([employeeId, assessmentDate(sort: Desc)])
  @@index([motivationTypeId])
  @@map("staff_motivation_history")
}

enum ConfidenceLevel {
  HIGH   @map("high")
  MEDIUM @map("medium")
  LOW    @map("low")
}

// 動機タイプ別推奨アクション
model MotivationTypeAction {
  id                String         @id @default(cuid())
  motivationTypeId  String         @map("motivation_type_id")
  actionCategory    ActionCategory @map("action_category")
  actionName        String         @map("action_name")
  actionDescription String?        @map("action_description")
  priority          Int            @default(5)
  isActive          Boolean        @default(true) @map("is_active")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")

  // Relations
  motivationType MotivationType @relation(fields: [motivationTypeId], references: [id])

  @@index([motivationTypeId, actionCategory])
  @@map("motivation_type_actions")
}

enum ActionCategory {
  TRAINING    @map("training")
  PROJECT     @map("project")
  REWARD      @map("reward")
  ENVIRONMENT @map("environment")
  CAREER      @map("career")
  OTHER       @map("other")
}

// 動機タイプ組み合わせ相性
model MotivationTypeCompatibility {
  id                 String             @id @default(cuid())
  typeId1            String             @map("type_id_1")
  typeId2            String             @map("type_id_2")
  compatibilityLevel CompatibilityLevel @map("compatibility_level")
  description        String?
  managementTips     String?            @map("management_tips")
  createdAt          DateTime           @default(now()) @map("created_at")

  // Relations
  type1 MotivationType @relation("CompatibilityFrom", fields: [typeId1], references: [id])
  type2 MotivationType @relation("CompatibilityTo", fields: [typeId2], references: [id])

  @@unique([typeId1, typeId2])
  @@map("motivation_type_compatibility")
}

enum CompatibilityLevel {
  EXCELLENT @map("excellent")
  GOOD      @map("good")
  NEUTRAL   @map("neutral")
  CAUTION   @map("caution")
  DIFFICULT @map("difficult")
}

// 面談記録テーブルの拡張（動機タイプ関連フィールド追加）
model Interview {
  id                   String                   @id @default(cuid())
  employeeId           String                   @map("employee_id")
  interviewerId        String                   @map("interviewer_id")
  interviewDate        DateTime                 @map("interview_date")
  interviewType        String                   @map("interview_type")
  duration             Int?                     // 面談時間（分）
  
  // 動機タイプ関連フィールド（v5追加）
  motivationTypeId     String?                  @map("motivation_type_id")
  motivationConfidence ConfidenceLevel?         @map("motivation_confidence")
  typeSpecificNotes    String?                  @map("type_specific_notes")
  
  // 既存フィールド
  overallEvaluation    String?                  @map("overall_evaluation")
  potentialEvaluation  String?                  @map("potential_evaluation")
  turnoverRisk         String?                  @map("turnover_risk")
  developmentPlan      String?                  @map("development_plan")
  nextActionItems      Json?                    @map("next_action_items")
  notes                String?
  createdAt            DateTime                 @default(now()) @map("created_at")
  updatedAt            DateTime                 @updatedAt @map("updated_at")

  // Relations
  employee           Employee                   @relation(fields: [employeeId], references: [id])
  interviewer        Employee                   @relation("InterviewerRelation", fields: [interviewerId], references: [id])
  motivationType     MotivationType?            @relation(fields: [motivationTypeId], references: [id])
  motivationHistory  StaffMotivationHistory[]

  @@index([employeeId])
  @@index([motivationTypeId])
  @@map("interviews")
}

// ============================================
// 面談予約システム
// ============================================

// 面談予約テーブル
model InterviewReservation {
  id               String   @id @default(cuid())
  type             InterviewReservationType
  subType          String?  @map("sub_type")
  status           ReservationStatus @default(PENDING)
  urgency          UrgencyLevel?
  
  // 職員情報
  staffId          String   @map("staff_id")
  staffName        String   @map("staff_name")
  department       String
  position         String
  experienceYears  Int      @default(0) @map("experience_years")
  
  // 予約詳細
  scheduledDate    DateTime @map("scheduled_date")
  scheduledTime    String   @map("scheduled_time") // HH:MM形式
  duration         Int      @default(30)
  location         String?
  onlineUrl        String?  @map("online_url")
  
  // 定期面談用
  regularType      RegularInterviewType? @map("regular_type")
  regularCycle     String?  @map("regular_cycle")
  
  // 特別面談用
  specialType      SpecialInterviewType? @map("special_type")
  specialContext   Json?    @map("special_context")
  specialReason    String?  @map("special_reason")
  
  // サポート面談用
  supportCategory  String?  @map("support_category")
  supportTopic     String?  @map("support_topic")
  supportDetails   String?  @map("support_details")
  voicedriveRequestId String? @unique @map("voicedrive_request_id")
  
  // メタデータ
  source           ReservationSource @default(SYSTEM)
  createdBy        String   @map("created_by")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  notes            String?
  
  // Relations
  // employee         Employee @relation(fields: [staffId], references: [id])
  logs             InterviewReservationLog[]
  notifications    InterviewNotificationQueue[]
  
  @@index([staffId])
  @@index([scheduledDate, scheduledTime])
  @@index([status])
  @@index([type])
  @@index([source])
  @@index([voicedriveRequestId])
  @@map("interview_reservations")
}

// 予約操作ログテーブル
model InterviewReservationLog {
  id            Int      @id @default(autoincrement())
  reservationId String   @map("reservation_id")
  action        LogAction
  performedBy   String   @map("performed_by")
  performedAt   DateTime @default(now()) @map("performed_at")
  changes       Json?
  reason        String?
  
  // Relations
  reservation   InterviewReservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  
  @@index([reservationId])
  @@index([performedAt])
  @@map("interview_reservation_logs")
}

// 通知キューテーブル
model InterviewNotificationQueue {
  id               Int      @id @default(autoincrement())
  reservationId    String   @map("reservation_id")
  recipientId      String   @map("recipient_id")
  notificationType NotificationType @map("notification_type")
  channel          NotificationChannel
  scheduledAt      DateTime @map("scheduled_at")
  sentAt           DateTime? @map("sent_at")
  status           NotificationStatus @default(PENDING)
  retryCount       Int      @default(0) @map("retry_count")
  errorMessage     String?  @map("error_message")
  
  // Relations
  reservation      InterviewReservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  
  @@index([status, scheduledAt])
  @@index([recipientId])
  @@map("interview_notification_queue")
}

// Enums
enum InterviewReservationType {
  REGULAR @map("regular")
  SPECIAL @map("special")
  SUPPORT @map("support")
}

enum ReservationStatus {
  PENDING    @map("pending")
  CONFIRMED  @map("confirmed")
  IN_PROGRESS @map("in_progress")
  COMPLETED  @map("completed")
  CANCELLED  @map("cancelled")
}

enum UrgencyLevel {
  LOW    @map("low")
  MEDIUM @map("medium")
  HIGH   @map("high")
  URGENT @map("urgent")
}

enum RegularInterviewType {
  NEW_EMPLOYEE @map("new_employee")
  ANNUAL      @map("annual")
  MANAGEMENT  @map("management")
}

enum SpecialInterviewType {
  EXIT        @map("exit")
  TRANSFER    @map("transfer")
  RETURN      @map("return")
  PROMOTION   @map("promotion")
  DISCIPLINARY @map("disciplinary")
}

enum ReservationSource {
  MANUAL     @map("manual")
  VOICEDRIVE @map("voicedrive")
  SYSTEM     @map("system")
}

enum LogAction {
  CREATED   @map("created")
  UPDATED   @map("updated")
  CANCELLED @map("cancelled")
  COMPLETED @map("completed")
}

enum NotificationType {
  RESERVATION_CREATED @map("reservation_created")
  REMINDER           @map("reminder")
  CANCELLED          @map("cancelled")
  RESCHEDULED        @map("rescheduled")
}

enum NotificationChannel {
  EMAIL @map("email")
  APP   @map("app")
  SMS   @map("sms")
}

enum NotificationStatus {
  PENDING @map("pending")
  SENT    @map("sent")
  FAILED  @map("failed")
}